user nginx;
worker_processes auto;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  sendfile on;
  keepalive_timeout 65;

  # Logs
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  # Compressão
  gzip on;
  gzip_types text/plain text/css application/json application/javascript application/xml+rss application/xml image/svg+xml;
  gzip_min_length 256;

  # Cache para arquivos estáticos
  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m max_size=1g inactive=24h use_temp_path=off;

  upstream api_backend {
    server api:5000; # Nome do serviço do docker-compose
  }

  server {
    listen 80;

    # Se quiser forçar HTTPS (descomente)
    # return 301 https://$host$request_uri;

    server_name _;

    # Proxy para API
    location / {
      proxy_pass http://api_backend;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection keep-alive;
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Cache para assets estáticos
    location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2?|eot|ttf|svg)$ {
      expires 30d;
      add_header Cache-Control "public";
      access_log off;
    }
  }

  # Se quiser HTTPS com Let's Encrypt ou certificados, adicionar bloco abaixo
  # server {
  #     listen 443 ssl;
  #     server_name exemplo.com;
  #     ssl_certificate /etc/nginx/ssl/fullchain.pem;
  #     ssl_certificate_key /etc/nginx/ssl/privkey.pem;
  #
  #     include /etc/nginx/snippets/ssl-params.conf;
  #
  #     location / {
  #         proxy_pass http://api_backend;
  #     }
  # }
}
