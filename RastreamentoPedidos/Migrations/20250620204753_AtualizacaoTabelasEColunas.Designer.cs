// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RastreamentoPedidos.Data;

#nullable disable

namespace RastreamentoPedidos.API.Migrations
{
    [DbContext(typeof(RastreamentoPedidosContext))]
    [Migration("20250620204753_AtualizacaoTabelasEColunas")]
    partial class AtualizacaoTabelasEColunas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.Cidade", b =>
                {
                    b.Property<int>("IdCidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idCidade");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("IdCidade"));

                    b.Property<int>("IdUF")
                        .HasColumnType("integer")
                        .HasColumnName("idUF");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("nome");

                    b.HasKey("IdCidade");

                    b.HasIndex("IdUF");

                    b.ToTable("cidade", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idCliente");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("IdCliente"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("EstadoCivilId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdEncomenda")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Sexo")
                        .HasColumnType("boolean");

                    b.HasKey("IdCliente");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idEnderecoCliente");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("bairro");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<int>("CidadeIdCidade")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EncomendaId")
                        .HasColumnType("integer");

                    b.Property<int>("IdCliente")
                        .HasColumnType("integer");

                    b.Property<int>("IdTpLogradouro")
                        .HasColumnType("integer");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("numero");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("CidadeIdCidade");

                    b.HasIndex("EncomendaId");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdTpLogradouro");

                    b.ToTable("endereco", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.EstadoCivil", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("idestadocivil");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("EstadoCivilDescricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("estadoCivil", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.Telefone", b =>
                {
                    b.Property<int>("IdTelefoneCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idTelefoneCliente");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("IdTelefoneCliente"));

                    b.Property<int>("IdCliente")
                        .HasColumnType("integer");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("numero");

                    b.Property<bool>("Padrao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("padrao");

                    b.Property<string>("Prefixo")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("prefixo");

                    b.HasKey("IdTelefoneCliente");

                    b.HasIndex("IdCliente");

                    b.ToTable("telefone", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.TpLogradouro", b =>
                {
                    b.Property<int>("IdTpLogradouro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idTpLogradouro");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("IdTpLogradouro"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("nome");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("sigla");

                    b.HasKey("IdTpLogradouro");

                    b.ToTable("tp_logradouro", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.UF", b =>
                {
                    b.Property<int>("IdUF")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idUf");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("IdUF"));

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("sigla");

                    b.HasKey("IdUF");

                    b.ToTable("uf", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.EncomendaAuditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_encomenda_auditoria");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataHoraEvento")
                        .HasColumnType("timestamp")
                        .HasColumnName("data_hora_evento");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp")
                        .HasColumnName("data_registro");

                    b.Property<string>("DescricaoEvento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao_evento");

                    b.Property<int>("EncomendaId")
                        .HasColumnType("integer")
                        .HasColumnName("id_encomenda");

                    b.Property<int>("EncomendaId1")
                        .HasColumnType("integer");

                    b.Property<string>("LocalDestino")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("local_destino");

                    b.Property<string>("LocalOrigem")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("local_origem");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("observacoes");

                    b.Property<string>("Responsavel")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("responsavel");

                    b.Property<string>("StatusAtual")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status_atual");

                    b.Property<string>("StatusEntrega")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status_entregas");

                    b.HasKey("Id");

                    b.HasIndex("EncomendaId");

                    b.HasIndex("EncomendaId1");

                    b.ToTable("encomenda_auditoria", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.Encomendas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_encomenda");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("id_cliente");

                    b.Property<string>("CodigoRastreamento")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codigo_rastreamento");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DataEncomenda")
                        .HasColumnType("timestamp")
                        .HasColumnName("data_encomenda");

                    b.Property<DateTime>("DataPrevisao")
                        .HasColumnType("timestamp")
                        .HasColumnName("data_previsao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descricao");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer")
                        .HasColumnName("id_rota");

                    b.Property<int?>("RotaId1")
                        .HasColumnType("integer");

                    b.Property<int>("StatusEncomendaId")
                        .HasColumnType("integer")
                        .HasColumnName("id_status_encomenda");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CodigoRastreamento")
                        .IsUnique();

                    b.HasIndex("RotaId");

                    b.HasIndex("RotaId1");

                    b.HasIndex("StatusEncomendaId");

                    b.ToTable("encomendas", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.PontoParada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_ponto_parada");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("localizacao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer")
                        .HasColumnName("ordem");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer")
                        .HasColumnName("id_rota");

                    b.HasKey("Id");

                    b.HasIndex("RotaId");

                    b.ToTable("pontos_parada", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.Rota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_rota");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("rotas", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.StatusEncomenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("status_entregas", (string)null);
                });

            modelBuilder.Entity("RastreamentoPedidos.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DescricaoStatus")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("StatusUser")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RastreamentoPedidos.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RastreamentoPedidos.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastreamentoPedidos.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RastreamentoPedidos.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.Cidade", b =>
                {
                    b.HasOne("RastreamentoPedido.Core.Model.Clientes.UF", "UF")
                        .WithMany()
                        .HasForeignKey("IdUF")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UF");
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.Endereco", b =>
                {
                    b.HasOne("RastreamentoPedido.Core.Model.Clientes.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeIdCidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastreamentoPedido.Core.Model.Encomenda.Encomendas", null)
                        .WithMany()
                        .HasForeignKey("EncomendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastreamentoPedido.Core.Model.Clientes.Cliente", null)
                        .WithMany("Enderecos")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastreamentoPedido.Core.Model.Clientes.TpLogradouro", "TpLogradouro")
                        .WithMany()
                        .HasForeignKey("IdTpLogradouro")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cidade");

                    b.Navigation("TpLogradouro");
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.EstadoCivil", b =>
                {
                    b.HasOne("RastreamentoPedido.Core.Model.Clientes.Cliente", null)
                        .WithOne("EstadoCivil")
                        .HasForeignKey("RastreamentoPedido.Core.Model.Clientes.EstadoCivil", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.Telefone", b =>
                {
                    b.HasOne("RastreamentoPedido.Core.Model.Clientes.Cliente", null)
                        .WithMany("Telefones")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.EncomendaAuditoria", b =>
                {
                    b.HasOne("RastreamentoPedido.Core.Model.Encomenda.Encomendas", null)
                        .WithMany("Auditorias")
                        .HasForeignKey("EncomendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastreamentoPedido.Core.Model.Encomenda.Encomendas", "Encomenda")
                        .WithMany()
                        .HasForeignKey("EncomendaId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encomenda");
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.Encomendas", b =>
                {
                    b.HasOne("RastreamentoPedido.Core.Model.Clientes.Cliente", "Cliente")
                        .WithMany("Encomendas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastreamentoPedido.Core.Model.Encomenda.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastreamentoPedido.Core.Model.Encomenda.Rota", null)
                        .WithMany("Encomendas")
                        .HasForeignKey("RotaId1");

                    b.HasOne("RastreamentoPedido.Core.Model.Encomenda.StatusEncomenda", "StatusEncomenda")
                        .WithMany("Encomendas")
                        .HasForeignKey("StatusEncomendaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Rota");

                    b.Navigation("StatusEncomenda");
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.PontoParada", b =>
                {
                    b.HasOne("RastreamentoPedido.Core.Model.Encomenda.Rota", "Rota")
                        .WithMany("PontosParada")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Clientes.Cliente", b =>
                {
                    b.Navigation("Encomendas");

                    b.Navigation("Enderecos");

                    b.Navigation("EstadoCivil")
                        .IsRequired();

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.Encomendas", b =>
                {
                    b.Navigation("Auditorias");
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.Rota", b =>
                {
                    b.Navigation("Encomendas");

                    b.Navigation("PontosParada");
                });

            modelBuilder.Entity("RastreamentoPedido.Core.Model.Encomenda.StatusEncomenda", b =>
                {
                    b.Navigation("Encomendas");
                });
#pragma warning restore 612, 618
        }
    }
}
